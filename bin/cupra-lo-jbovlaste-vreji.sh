#!/usr/bin/env sh

## File: cupra-lo-jbovlaste-vreji.sh
##
## .i zmiku cupra lo vreji be fi lo datni be la jbovlaste
##
## Usage:
##
##   (start code)
##   cupra-lo-jbovlaste-vreji.sh [OPTION]... LANG FILE
##   (end)
##
## Options:
##
##   -c, --curl=OPTIONS - curl options.
##   -h, --help         - display this help and exit.
##   -v, --version      - output version information and exit.
##
## Exit Status:
##
##   0 - Program terminated normally.
##   1 - FILE was not updated.
##   64<= to <=78 - Program terminated abnormally. See </usr/include/sysexits.h> for the returned value.
##   129 - SIGHUP
##   130 - SIGINT
##   131 - SIGQUIT
##   143 - SIGTERM
##
## Metadata:
##
##   author - qq542vev <https://purl.org/meta/me/>
##   version - 0.1.1
##   date - 2022-03-05
##   since - 2022-02-08
##   license - CC-0 <https://creativecommons.org/publicdomain/zero/1.0/>
##   package - jvs_ja
##
## See Also:
##
##   * Project homepage - <https://github.com/qq542vev/jvs_ja>
##   * Bag report - <https://github.com/qq542vev/jvs_ja/issues>

set -efu
umask '0022'
IFS=$(printf ' \t\n$'); IFS="${IFS%$}"
export 'IFS'

# See also </usr/include/sysexits.h>
EX_USAGE='64'
EX_SOFTWARE='68'
EX_CANTCREAT='73'

trap 'endCall $(case "${?}" in [!0]*) echo "${EX_SOFTWARE}";; esac)' 0 # EXIT
trap 'endCall 129' 1 # SIGHUP
trap 'endCall 130' 2 # SIGINT
trap 'endCall 131' 3 # SIGQUIT
trap 'endCall 143' 15 # SIGTERM

endCall() {
	trap '' 0 # EXIT
	rm -fr -- ${tmpDir+"${tmpDir}"}
	exit "${1:-0}"
}

usage() {
	sed -e '/^## *(start code)/,/^## *(end)/!d' -- "${0}" | sed -e '1d; $d; s/^## */Usage: /'
	sed -e '/^## File:/,/^## .*:$/!d' -- "${0}" | sed -e '1d; $d; s/^## *//'

	printf 'Options:\n'
	sed -n -e '/^## *-.* - /s/^## *//p' -- "${0}" | awk -F ' - ' '{print "  " $1 "  " $2}'

	printf '\nExit status:\n'
	sed -n -e '/^## *[0-9]\{1,\}.* - /s/^## */  /p' -- "${0}"
}

version() {
	cat <<-EOF
		$(sed -n -e 's/^## File: //p' -- "${0}") ($(sed -n -e 's/^## *package - //p' -- "${0}")) $(sed -n -e 's/^## *version - //p' -- "${0}") (Last update: $(sed -n -e 's/^## *date - //p' -- "${0}"))
		License: $(sed -n -e 's/^## *license - //p' -- "${0}")
		Author: $(sed -n -e 's/^## *author - //p' -- "${0}")
	EOF
}

error() {
	printf '%s\n' "${1}" >&2
	endCall "${EX_USAGE}"
}

# @getoptions
parser_definition() {
	setup REST plus:true abbr:true error:error
	param curlOption -c --curl init:=''
	disp  :usage     -h --help
	disp  :version   -v --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
curlOption=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    set -- "${1%%\=*}" "${1#*\=}" "$@"
    while [ ${#1} -gt 2 ]; do
      case $1 in (*[!a-zA-Z0-9_-]*) break; esac
      case '--curl' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --curl"
      esac
      case '--help' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --help"
      esac
      case '--version' in
        "$1") OPTARG=; break ;;
        $1*) OPTARG="$OPTARG --version"
      esac
      break
    done
    case ${OPTARG# } in
      *\ *)
        eval "set -- $OPTARG $1 $OPTARG"
        OPTIND=$((($#+1)/2)) OPTARG=$1; shift
        while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done
        set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"
        error "$@" >&2 || exit $?
        echo "$1" >&2
        exit 1 ;;
      ?*)
        [ "$2" = "$3" ] || OPTARG="$OPTARG=$2"
        shift 3; eval 'set -- "${OPTARG# }"' ${1+'"$@"'}; OPTARG= ;;
      *) shift 2
    esac
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[c]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" "${OPTARG#??}"' ${1+'"$@"'}
        ;;
      -[hv]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
      +*) unset OPTARG ;;
    esac
    case $1 in
      '-c'|'--curl')
        [ $# -le 1 ] && set "required" "$1" && break
        OPTARG=$2
        curlOption="$OPTARG"
        shift ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '-v'|'--version')
        version
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-+]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  error "$@" >&2 || exit $?
  echo "$1" >&2
  exit 1
}
# Generated by getoptions (END)
# @end

parse ${@+"${@}"}
eval "set -- ${REST}"

case "${#}" in
	'0') error 'Requires an argument: LANG and FILE';;
	'1') error 'Requires an argument: FILE';;
esac

tmpDir=$(mktemp -d)
downloadFile="${tmpDir}/data"
lang="${1}"
currentFile="${2}"

if [ -d "${2}" ]; then
	printf "'%s' is directory.\\n" "${2}" >&2
	endCall "${EX_CANTCREAT}"
fi

command='cpacu-lo-jbovlaste-datni.sh'

if command -v "${command}" >'/dev/null' 2>&1; then :; else
	if [ -x "$(dirname "${0}")/${command}" ]; then
		command="$(dirname "${0}")/${command}"
	fi
fi

"${command}" --curl "${curlOption}" "${lang}" >"${downloadFile}" || endCall "${?}"

xmllint --noout "${downloadFile}"

if [ ! -e "${currentFile}" ]; then
	: >"${currentFile}"
fi

diff -- "${downloadFile}" "${currentFile}" >'/dev/null' || case "${?}" in
	'1')
		cat -- "${downloadFile}" >"${currentFile}"
		endCall 0
		;;
	*)
		endCall "${EX_USAGE}"
		;;
esac

endCall 1
